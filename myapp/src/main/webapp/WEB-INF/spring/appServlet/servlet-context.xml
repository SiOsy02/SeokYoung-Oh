<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- 애노테이션을 사용한 스프링 웹 MVC 애플리케이션 작성을 위해서 필요한 객체들을 등록 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
<!-- "/resources/**" 경로에 대한 요청이 오면, -->
<!-- 지정한 경로의 파일을 /resources/ 폴더에서 찾아서 응답으로 전송해주는 핸들러(컨트롤러)를 등록 -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- InternalResourceViewResolver : 뷰이름을 내부 자원(파일)의 경로로 간주하고, -->
	<!-- 그 자원(파일)로 포워딩하는 InternalResourceView 객체를 생성하여 반환 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
		<!-- 스프링으로부터 전달받은 뷰이름의 앞에 prefix를 뒤에 suffix를 붙여서 뷰이름으로 사용 -->
	</beans:bean>
	
	<!-- TilesViewResolver :  -->
	<!-- 뷰이름과 동일한 이름의 화면정의 대로 화면을 구성하여 출력하는 뷰 객체 반환 -->
	<!-- 동일한 이름의 화면정의가 없으면 찾지 못했다는 의미로 null 반환 -->
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
		<!-- 스프링이 TilesViewResolver를  -->
		<!-- InternalResourceViewResolver보다 먼저 사용하도록 order 속성 설정   -->
		<beans:property name="order" value="1" />
	</beans:bean>
	
	<!-- 타일즈 설정 파일 등록 -->
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<!-- 타일즈 화면을 정의한 설정 파일들의 위치를 지정 -->
		<beans:property name="definitions" >
			<beans:list>
				<beans:value>/WEB-INF/views/tiles/tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- @Component,@Controller,@Service,@Repository를 등록하는 디폴트 필터를 비활성화 -->
	<context:component-scan base-package="com.exam.myapp" use-default-filters="false" >
		<!-- @Controller 애노테이션이 붙은 클래스는 찾아서 스프링에 등록 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<interceptors>
		<interceptor>
			<!-- 인터셉터를 실행할 요청 경로를 설정 -->
			<!-- *,**은 0개 이상의 모든 문자를 의미, **은 / 문자도 포함 -->
			<mapping path="/**" />
			<!-- 인터셉터를 실행하지 않을 요청 경로를 설정 -->
			<exclude-mapping path="/member/login.do" />
			<exclude-mapping path="/member/add.do" />
			<!-- 실행할 인터셉터 객체 설정 -->
			<beans:bean class="com.exam.myapp.comm.LoginInterceptor" ></beans:bean>
		</interceptor>
	</interceptors>

	<!-- 	파일이 포함된 multipart/form-data를 수신하고 해석하는 일을 담당하는 -->
	<!-- 	MultipartResolver 객체를 "multipartResolver"라는 이름으로 스프링에 등록 -->
	<!-- 	스프링이 제공하는 MultipartResolver 들 -->
	<!-- 	(1) CommonsMultipartResolver : commons-fileupload 라이브러리를 사용 -->
	<!-- 	(2) StandardServletMultipartResolver : 서블릿3.0부터 지원하는 API를 사용	  -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >
		<!-- 요청 메시지 1개의 최대 크기(바이트) 설정 (-1은 무제한을 의미) -->
		<beans:property name="maxUploadSize" value="-1" />
		<!-- 요청 메시지에 담긴 파일 1개의 최대 크기(바이트) 설정  -->
		<!-- <beans:property name="maxUploadSizePerFile" value="-1" /> -->
	</beans:bean>
	
	<!-- messageSource 라는 이름으로 MessageSource 객체를 등록하여  -->
	<!-- 애플리케이션 전체에서 사용하는 메시지들을 스프링에 등록 -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" >
		<!-- 클래스패스의 errmsg_xx.properties 파일로부터 메시지 읽기 -->
		<beans:property name="basename" value="errmsg" />
	</beans:bean>
	
	
</beans:beans>







